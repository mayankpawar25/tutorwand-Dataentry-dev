/*
Copyright (c) 2003-2021, CKSource - Frederico Knabben. All rights reserved.
For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
*/
// CKEDITOR.plugins.add("urluploading",{requires:"uploadwidget",onLoad:function(){CKEDITOR.addCss(".cke_upload_uploading img{opacity: 0.3}")},isSupportedEnvironment:function(){return CKEDITOR.plugins.clipboard.isFileApiSupported},init:function(n){this.isSupportedEnvironment()&&CKEDITOR.fileTools.getUploadUrl(n.config,"image")&&n.on("paste",function(t){if(t.data.dataValue.match(/<img[\s\S]/i)&&!t.data.dataValue.match(/<img[\s\S]+data:/i)){t=t.data;var e,i,o=document.implementation.createHTMLDocument("");(o=new CKEDITOR.dom.element(o.body)).data("cke-editable",1),o.appendHtml(t.dataValue),e=o.find("img");var a=CKEDITOR.instances[`${n.name}`].getData();for(i=0;i<e.count();i++){var r=e.getItem(i).getAttribute("src");$.ajax({url:$("#URL_UPLOAD_URL").val(),type:"POST",dataType:"json",data:{imageURL:r,index:i},success:function(i){i.data&&(getRespItem=e.getItem(i.index),getRespItem.setAttribute("src",i.data.url),t.dataValue=o.getHtml(),CKEDITOR.instances[`${n.name}`].setData(a+$.trim(t.dataValue)))},error:function(t,e,i){msgToast("error","Pasted third party image url is not downloadable. Try to take screenshot and paste."),500==t.status&&CKEDITOR.instances[`${n.name}`].setData(a)}})}}})}});

/*CKEDITOR.plugins.add("urluploading", {
    requires: "uploadwidget",
    onLoad: function() {
        CKEDITOR.addCss(".cke_upload_uploading img{opacity: 0.3}")
    },
    isSupportedEnvironment: function() {
        return CKEDITOR.plugins.clipboard.isFileApiSupported
    },
    init: function(n) {
        this.isSupportedEnvironment() && CKEDITOR.fileTools.getUploadUrl(n.config, "image") && n.on("paste", function(t) {
            if (t.data.dataValue.match(/<img[\s\S]/i) && !t.data.dataValue.match(/<img[\s\S]+data:/i)) {
                t = t.data;
                var e, i, o = document.implementation.createHTMLDocument("");
                (o = new CKEDITOR.dom.element(o.body)).data("cke-editable", 1), o.appendHtml(t.dataValue), e = o.find("img");
                var a = CKEDITOR.instances[`${n.name}`].getData();
                for (i = 0; i < e.count(); i++) {
                    var r = e.getItem(i).getAttribute("src");
                    $.ajax({
                        url: $("#URL_UPLOAD_URL").val(),
                        type: "POST",
                        dataType: "json",
                        data: {
                            imageURL: r,
                            index: i
                        },
                        success: function(i) {
                        	console.log("data Shown ", i, a + $.trim(t.dataValue));
                            i.data && (getRespItem = e.getItem(i.index), getRespItem.setAttribute("src", i.data.url), t.dataValue = o.getHtml(), CKEDITOR.instances[`${n.name}`].setData(a + $.trim(t.dataValue)))
                        },
                        error: function(t, e, i) {
                            msgToast("error", "Pasted third party image url is not downloadable. Try to take screenshot and paste."), 500 == t.status && CKEDITOR.instances[`${n.name}`].setData(a)
                        }
                    })
                }
            }
        })
    }
});*/

(function() {
    CKEDITOR.plugins.add("urluploading", {
        requires: "uploadwidget",
        onLoad: function() {
            CKEDITOR.addCss(".cke_upload_uploading img{opacity: 0.3}")
        },
        isSupportedEnvironment: function() {
            return CKEDITOR.plugins.clipboard.isFileApiSupported
        },
        init: function(myeditor) {
            if (this.isSupportedEnvironment()) {
                var filetools = CKEDITOR.fileTools,
                    imagetool = filetools.getUploadUrl(myeditor.config, "image");
                    imagetool && (myeditor.on("paste", function(objectData) {
                        if (objectData.data.dataValue.match(/<img[\s\S]/i) && !(objectData.data.dataValue.match(/<img[\s\S]+data:/i))) {
                            objectData = objectData.data;
                            var htmlDoc = document.implementation.createHTMLDocument(""),
                                htmlDoc = new CKEDITOR.dom.element(htmlDoc.body),
                                images, getImageItem, index;
                            htmlDoc.data("cke-editable", 1);
                            htmlDoc.appendHtml(objectData.dataValue);

                            images = htmlDoc.find("img");
                            for (index = 0; index < images.count(); index++) {
                                getImageItem = images.getItem(index);
                                var imageUrl = getImageItem.getAttribute("src");
                                $.ajax({
                                    url: $("#URL_UPLOAD_URL").val(),
                                    type: 'POST',
                                    dataType: 'json',
                                    data: { imageURL: imageUrl , index: index},
                                    success: function(response) {
                                        if(response.data) {
                                            getRespItem = images.getItem(response.index);
                                            getRespItem.setAttribute("src", response.data.url);
                                            console.log("getRespItem", getRespItem, $(getRespItem).html(), getRespItem.getHtml() );
                                            objectData.dataValue = htmlDoc.getHtml();
                                            CKEDITOR.instances[`${myeditor.name}`].setData($.trim(objectData.dataValue));
                                        }
                                    }
                                });
                            }
                        }
                    })
                )
            }
        }
    })
})();